import random
import os
from collections import deque
from dotenv import load_dotenv
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup
import db

load_dotenv()

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '')
state_storage = StateMemoryStorage()
bot = TeleBot(TOKEN, state_storage=state_storage, parse_mode='HTML')


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚ûñ'
    NEXT = '–î–∞–ª—å—à–µ ‚ñ∂'
    STATS = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä'
    ACHIEVEMENTS = '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üèÜ'
    SETTINGS = '‚öôÔ∏è –†–µ–∂–∏–º'

ACHIEVEMENTS_MAP = {
    'learned_10': 'üéì –ù–æ–≤–∏—á–æ–∫ - –í—ã—É—á–µ–Ω–æ 10 —Å–ª–æ–≤.',
    'learned_50': 'üßê –ó–Ω–∞—Ç–æ–∫ - –í—ã—É—á–µ–Ω–æ 50 —Å–ª–æ–≤.',
    'learned_100': 'üß† –ü–æ–ª–∏–≥–ª–æ—Ç - –í—ã—É—á–µ–Ω–æ 100 —Å–ª–æ–≤.',
    'streak_3': 'üî• –£–ø–æ—Ä—Å—Ç–≤–æ - –°–µ—Ä–∏—è 3 –¥–Ω—è.',
    'streak_7': 'üöÄ –ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü - –°–µ—Ä–∏—è 7 –¥–Ω–µ–π.',
    'streak_14': 'üèÜ –ß–µ–º–ø–∏–æ–Ω - –°–µ—Ä–∏—è 14 –¥–Ω–µ–π.',
    'first_word': '‚úçÔ∏è –ü–µ—Ä–≤–æ–ø—Ä–æ—Ö–æ–¥–µ—Ü - –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–µ—Ä–≤–æ–µ –ª–∏—á–Ω–æ–µ —Å–ª–æ–≤–æ.',
}

# {user_id: {'review_queue': deque([...]), 'review_countdown': 0}}
user_session = {}


class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    options = State()
    add_word = State()
    delete_word = State()


def init_db():
    print("Initializing database...")
    db.create_tables()
    # –ï—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ—Ç —Å–ª–æ–≤, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ —Ñ–∞–π–ª–∞
    if not db.get_common_words():
        print("Database is empty. Populating with initial words from 5000_words.txt...")
        print("This may take a moment, please wait...")
        db.import_words_from_txt('5000_words.txt')
        print("Database populated successfully.")
    print("Database is ready.")


def get_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton(Command.NEXT))
    markup.add(
        types.KeyboardButton(Command.ADD_WORD),
        types.KeyboardButton(Command.DELETE_WORD),
        types.KeyboardButton(Command.STATS)
    )
    markup.add(
        types.KeyboardButton(Command.ACHIEVEMENTS),
        types.KeyboardButton(Command.SETTINGS)
    )
    return markup


def get_options_keyboard(options):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
    for opt in options:
        markup.add(types.KeyboardButton(opt))
    # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    markup.add(
        types.KeyboardButton(Command.ADD_WORD),
        types.KeyboardButton(Command.DELETE_WORD),
        types.KeyboardButton(Command.STATS)
    )
    markup.add(
        types.KeyboardButton(Command.ACHIEVEMENTS),
        types.KeyboardButton(Command.SETTINGS)
    )
    markup.add(types.KeyboardButton(Command.NEXT))
    return markup


def check_and_grant_achievements(user_id, chat_id):
    stats = db.get_user_stats_for_achievements(user_id)
    if not stats:
        return

    user_achievements = db.get_user_achievements(user_id)
    
    def grant_if_not_present(ach_id, condition):
        if condition and ach_id not in user_achievements:
            db.grant_achievement(user_id, ach_id)
            bot.send_message(chat_id, f"üéâ <b>–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!</b>\n{ACHIEVEMENTS_MAP[ach_id]}", reply_markup=get_main_keyboard())

    grant_if_not_present('learned_10', stats['learned_count'] >= 10)
    grant_if_not_present('learned_50', stats['learned_count'] >= 50)
    grant_if_not_present('learned_100', stats['learned_count'] >= 100)
    grant_if_not_present('streak_3', stats['current_streak'] >= 3)
    grant_if_not_present('streak_7', stats['current_streak'] >= 7)
    grant_if_not_present('streak_14', stats['current_streak'] >= 14)
    grant_if_not_present('first_word', stats['personal_words_count'] >= 1)


@bot.message_handler(commands=['start'])
def start_handler(message):
    telegram_id = message.from_user.id
    username = message.from_user.username
    db.register_user(telegram_id, username)
    greeting = (
        '–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.\n'
        '–ù–∞–∂–º–∏ <b>–î–∞–ª—å—à–µ ‚ñ∂</b>, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.'
    )
    bot.send_message(message.chat.id, greeting, reply_markup=get_main_keyboard())
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–∏—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫–∏
    user_id = db.get_user_id(telegram_id)
    if user_id:
        db.update_user_streak(user_id)
        check_and_grant_achievements(user_id, message.chat.id)


@bot.message_handler(func=lambda m: m.text == Command.NEXT)
def next_question_handler(message):
    telegram_id = message.from_user.id
    user_id = db.get_user_id(telegram_id)
    session = user_session.setdefault(telegram_id, {'review_queue': deque(), 'review_countdown': 0})
    
    correct_pair = None
    options_en = []
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç - —Å–ª–æ–≤–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
    is_review_time = session['review_queue'] and session['review_countdown'] <= 0
    if is_review_time:
        correct_pair = session['review_queue'].popleft()
        distractors = db.get_distractors(user_id, correct_pair[0])
        
        if len(distractors) == 3:
            all_pairs = [correct_pair] + distractors
            options_en = [p[0] for p in all_pairs]
            random.shuffle(options_en)
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ 3 –¥—Ä—É–≥–∏—Ö —Å–ª–æ–≤–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–æ –≤ –æ—á–µ—Ä–µ–¥—å –∏ –±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ
            session['review_queue'].appendleft(correct_pair)
            correct_pair = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–±—ã—á–Ω–æ–º—É –≤—ã–±–æ—Ä—É
    
    # –û–±—ã—á–Ω—ã–π –≤—ã–±–æ—Ä —Å–ª–æ–≤–∞, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ —Å–ª–æ–≤–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
    if correct_pair is None:
        words = db.get_random_words_for_user(user_id)
        if len(words) < 4:
            bot.send_message(message.chat.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ!', reply_markup=get_main_keyboard())
            return
        
        correct_pair = words[0]
        options_en = [pair[0] for pair in words]
        random.shuffle(options_en)
        
        # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–∞
        session['review_countdown'] = max(0, session['review_countdown'] - 1)

    training_mode = db.get_user_training_mode(user_id)
    if training_mode == 'ru_en':
        question_word, answer_word = correct_pair[1], correct_pair[0]
        options = options_en
    else: # en_ru
        question_word, answer_word = correct_pair[0], correct_pair[1]
        # –î–ª—è —Ä–µ–∂–∏–º–∞ EN-RU –Ω—É–∂–Ω—ã —Ä—É—Å—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        distractors = db.get_distractors(user_id, correct_pair[0])
        options = [answer_word] + [d[1] for d in distractors]
        random.shuffle(options)

    bot.set_state(telegram_id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(telegram_id, message.chat.id) as data:
        data['word_en'] = correct_pair[0] # –í—Å–µ–≥–¥–∞ —Ö—Ä–∞–Ω–∏–º EN
        data['word_ru'] = correct_pair[1] # –í—Å–µ–≥–¥–∞ —Ö—Ä–∞–Ω–∏–º RU
        data['target_word'] = answer_word
        data['translate_word'] = question_word
        data['options'] = options

    bot.send_message(
        message.chat.id,
        f'–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è: <b>{question_word}</b>?',
        reply_markup=get_options_keyboard(options)
    )


@bot.message_handler(func=lambda m: m.text == Command.STATS)
def stats_handler(message):
    telegram_id = message.from_user.id
    user_id = db.get_user_id(telegram_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–∏—é –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    current_streak = db.update_user_streak(user_id)
    check_and_grant_achievements(user_id, message.chat.id)
    
    common_count = db.count_common_words()
    user_count = db.count_user_words(user_id)
    learned_count = db.get_today_correct_answers(user_id)
    total_unique = common_count + user_count
    current_mode = "üá∑üá∫ –†—É—Å—Å–∫–∏–π -> üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π" if db.get_user_training_mode(user_id) == 'ru_en' else "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π -> üá∑üá∫ –†—É—Å—Å–∫–∏–π"

    stats_text = (
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üî• –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–µ—Ä–∏—è: <b>{current_streak}</b>\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: <b>{learned_count}</b>\n\n"
        f"‚öôÔ∏è –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {current_mode}\n\n"
        f"üìñ <b>–°–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å:</b>\n"
        f"- –û–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å: <b>{common_count}</b> —Å–ª–æ–≤\n"
        f"- –í–∞—à–∏ –ª–∏—á–Ω—ã–µ —Å–ª–æ–≤–∞: <b>{user_count}</b> —Å–ª–æ–≤\n"
        f"- –í—Å–µ–≥–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è: <b>{total_unique}</b> —Å–ª–æ–≤\n\n"
        f'–ù–∞–∂–º–∏—Ç–µ "{Command.NEXT}", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!'
    )
    
    bot.send_message(message.chat.id, stats_text, reply_markup=get_main_keyboard())
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
    bot.delete_state(telegram_id, message.chat.id)


@bot.message_handler(func=lambda m: m.text == Command.ADD_WORD)
def add_word_handler(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>english - —Ä—É—Å—Å–∫–∏–π</b>')
    bot.set_state(message.from_user.id, MyStates.add_word, message.chat.id)


@bot.message_handler(state=MyStates.add_word, content_types=['text'])
def save_new_word(message):
    telegram_id = message.from_user.id
    user_id = db.get_user_id(telegram_id)
    try:
        en, ru = [s.strip() for s in message.text.split('-', 1)]
        db.add_user_word(user_id, en, ru)
        bot.send_message(message.chat.id, f'–°–ª–æ–≤–æ <b>"{en}"</b> –¥–æ–±–∞–≤–ª–µ–Ω–æ!', reply_markup=get_main_keyboard())
        check_and_grant_achievements(user_id, message.chat.id)
    except ValueError:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>english - —Ä—É—Å—Å–∫–∏–π</b>', reply_markup=get_main_keyboard())
    
    bot.delete_state(message.from_user.id, message.chat.id)


@bot.message_handler(func=lambda m: m.text == Command.DELETE_WORD)
def delete_word_handler(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')
    bot.set_state(message.from_user.id, MyStates.delete_word, message.chat.id)


@bot.message_handler(state=MyStates.delete_word, content_types=['text'])
def delete_word_confirm(message):
    telegram_id = message.from_user.id
    user_id = db.get_user_id(telegram_id)
    word_en = message.text.strip()
    db.delete_user_word(user_id, word_en)
    bot.send_message(message.chat.id, f'–°–ª–æ–≤–æ <b>"{word_en}"</b> —É–¥–∞–ª–µ–Ω–æ (–µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –≤ –≤–∞—à–µ–π –±–∞–∑–µ).', reply_markup=get_main_keyboard())
    bot.delete_state(message.from_user.id, message.chat.id)


@bot.message_handler(state=MyStates.target_word, content_types=['text'])
def answer_handler(message):
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ø–µ—Ä—å —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞
    telegram_id = message.from_user.id

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É
    if message.text in [Command.STATS, Command.ACHIEVEMENTS, Command.SETTINGS, Command.ADD_WORD, Command.DELETE_WORD]:
        bot.delete_state(telegram_id, message.chat.id)
        # –ò–º–∏—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        bot.process_new_messages([message])
        return

    with bot.retrieve_data(telegram_id, message.chat.id) as data:
        target_word = data.get('target_word')
        word_en = data.get('word_en')
        word_ru = data.get('word_ru')
        options = data.get('options')

    if not target_word or message.text not in options:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø—Ä–∏—à–µ–ª —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑ –∫–Ω–æ–ø–æ–∫-–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        return

    if message.text == target_word:
        bot.send_message(message.chat.id, '<b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üëç</b>')
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        user_id = db.get_user_id(telegram_id)
        db.log_correct_answer(user_id)
        db.update_user_streak(user_id)
        check_and_grant_achievements(user_id, message.chat.id)
    else:
        bot.send_message(message.chat.id, f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{data.get("translate_word")}</b> -> <b>{target_word}</b>')
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
        session = user_session.setdefault(telegram_id, {'review_queue': deque(), 'review_countdown': 0})
        word_pair = (word_en, word_ru)
        if word_pair not in session['review_queue']:
            session['review_queue'].append(word_pair)
        
        # –ï—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
        if session['review_countdown'] <= 0:
            session['review_countdown'] = random.randint(3, 5)
    
    bot.delete_state(telegram_id, message.chat.id)
    next_question_handler(message)


@bot.message_handler(func=lambda m: m.text == Command.ACHIEVEMENTS)
def achievements_handler(message):
    telegram_id = message.from_user.id
    user_id = db.get_user_id(telegram_id)
    user_achievements = db.get_user_achievements(user_id)

    if not user_achievements:
        ach_text = "üèÜ <b>–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è, –∏ –æ–Ω–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—è–≤—è—Ç—Å—è!"
    else:
        ach_text = "üèÜ <b>–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>\n\n"
        for ach_id in ACHIEVEMENTS_MAP:
            if ach_id in user_achievements:
                ach_text += f"‚úÖ {ACHIEVEMENTS_MAP[ach_id]}\n"
            else:
                ach_text += f"‚ùå {ACHIEVEMENTS_MAP[ach_id]}\n"

    bot.send_message(message.chat.id, ach_text, reply_markup=get_main_keyboard())


@bot.message_handler(func=lambda m: m.text == Command.SETTINGS)
def settings_handler(message):
    user_id = db.get_user_id(message.from_user.id)
    current_mode = db.get_user_training_mode(user_id)
    mode_text = "üá∑üá∫ –†—É—Å—Å–∫–∏–π -> üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π" if current_mode == 'ru_en' else "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π -> üá∑üá∫ –†—É—Å—Å–∫–∏–π"

    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üá∑üá∫ -> üá¨üáß", callback_data="set_mode:ru_en"),
        types.InlineKeyboardButton("üá¨üáß -> üá∑üá∫", callback_data="set_mode:en_ru")
    )
    bot.send_message(message.chat.id, f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: <b>{mode_text}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('set_mode:'))
def set_mode_callback(call):
    mode = call.data.split(':')[1]
    telegram_id = call.from_user.id
    user_id = db.get_user_id(telegram_id)
    db.set_user_training_mode(user_id, mode)

    mode_text = "–†—É—Å—Å–∫–∏–π -> –ê–Ω–≥–ª–∏–π—Å–∫–∏–π" if mode == 'ru_en' else "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π -> –†—É—Å—Å–∫–∏–π"
    bot.answer_callback_query(call.id, f"‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>{mode_text}</b>")
    bot.edit_message_text(f"‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>{mode_text}</b>", call.message.chat.id, call.message.message_id, reply_markup=None)
    # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∞–≤—Ç–æ–º–∞—Ç–æ–º, –¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–∂–∞—Ç—å "–î–∞–ª—å—à–µ"
    bot.send_message(call.message.chat.id, '–ù–∞–∂–º–∏—Ç–µ "–î–∞–ª—å—à–µ ‚ñ∂", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.', reply_markup=get_main_keyboard())


bot.add_custom_filter(custom_filters.StateFilter(bot))

if __name__ == '__main__':
    init_db()
    print("Bot is starting...")
    bot.infinity_polling(skip_pending=True) 